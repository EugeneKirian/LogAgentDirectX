/*
Copyright (c) 2024 Eugene Kirian

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/

#pragma once

#include "Base.hxx"

typedef struct Direct3DDevice3QueryInterfaceMethodValue
{
    GUID ID;
    LPVOID* Object;
} DIRECT3DDEVICE3QUERYINTERFACEMETHODVALUE, * LPDIRECT3DDEVICE3QUERYINTERFACEMETHODVALUE;

typedef struct Direct3DDevice3AddRefMethodValue
{

} DIRECT3DDEVICE3ADDREFMETHODVALUE, * LPDIRECT3DDEVICE3ADDREFMETHODVALUE;

typedef struct Direct3DDevice3ReleaseMethodValue
{

} DIRECT3DDEVICE3RELEASEMETHODVALUE, * LPDIRECT3DDEVICE3RELEASEMETHODVALUE;

typedef struct Direct3DDevice3GetCapsMethodValue
{
    LPD3DDEVICEDESC HardwareDescriptor;
    LPD3DDEVICEDESC EmulationDescriptor;
} DIRECT3DDEVICE3GETCAPSMETHODVALUE, * LPDIRECT3DDEVICE3GETCAPSMETHODVALUE;

typedef struct Direct3DDevice3GetStatsMethodValue
{
    LPD3DSTATS Statistics;
} DIRECT3DDEVICE3GETSTATSMETHODVALUE, * LPDIRECT3DDEVICE3GETSTATSMETHODVALUE;

typedef struct Direct3DDevice3AddViewportMethodValue
{
    LPDIRECT3DVIEWPORT3 ViewPort;
} DIRECT3DDEVICE3ADDVIEWPORTMETHODVALUE, * LPDIRECT3DDEVICE3ADDVIEWPORTMETHODVALUE;

typedef struct Direct3DDevice3DeleteViewportMethodValue
{
    LPDIRECT3DVIEWPORT3 ViewPort;
} DIRECT3DDEVICE3DELETEVIEWPORTMETHODVALUE, * LPDIRECT3DDEVICE3DELETEVIEWPORTMETHODVALUE;

typedef struct Direct3DDevice3NextViewportMethodValue
{
    LPDIRECT3DVIEWPORT3 ViewPort;
    LPDIRECT3DVIEWPORT3* NextViewPort;
    DWORD Options;
} DIRECT3DDEVICE3NEXTVIEWPORTMETHODVALUE, * LPDIRECT3DDEVICE3NEXTVIEWPORTMETHODVALUE;

typedef struct Direct3DDevice3EnumTextureFormatsMethodValue
{
    LPD3DENUMPIXELFORMATSCALLBACK Callback;
    LPVOID Context;
} DIRECT3DDEVICE3ENUMTEXTUREFORMATSMETHODVALUE, * LPDIRECT3DDEVICE3ENUMTEXTUREFORMATSMETHODVALUE;

typedef struct Direct3DDevice3BeginSceneMethodValue
{

} DIRECT3DDEVICE3BEGINSCENEMETHODVALUE, * LPDIRECT3DDEVICE3BEGINSCENEMETHODVALUE;

typedef struct Direct3DDevice3EndSceneMethodValue
{

} DIRECT3DDEVICE3ENDSCENEMETHODVALUE, * LPDIRECT3DDEVICE3ENDSCENEMETHODVALUE;

typedef struct Direct3DDevice3GetDirect3DMethodValue
{
    LPDIRECT3D3* Object;
} DIRECT3DDEVICE3GETDIRECT3DMETHODVALUE, * LPDIRECT3DDEVICE3GETDIRECT3DMETHODVALUE;

typedef struct Direct3DDevice3SetCurrentViewportMethodValue
{
    LPDIRECT3DVIEWPORT3 ViewPort;
} DIRECT3DDEVICE3SETCURRENTVIEWPORTMETHODVALUE, * LPDIRECT3DDEVICE3SETCURRENTVIEWPORTMETHODVALUE;

typedef struct Direct3DDevice3GetCurrentViewportMethodValue
{
    LPDIRECT3DVIEWPORT3* ViewPort;
} DIRECT3DDEVICE3GETCURRENTVIEWPORTMETHODVALUE, * LPDIRECT3DDEVICE3GETCURRENTVIEWPORTMETHODVALUE;

typedef struct Direct3DDevice3SetRenderTargetMethodValue
{
    LPDIRECTDRAWSURFACE4 Surface;
    DWORD Options;
} DIRECT3DDEVICE3SETRENDERTARGETMETHODVALUE, * LPDIRECT3DDEVICE3SETRENDERTARGETMETHODVALUE;

typedef struct Direct3DDevice3GetRenderTargetMethodValue
{
    LPDIRECTDRAWSURFACE4* Surface;
} DIRECT3DDEVICE3GETRENDERTARGETMETHODVALUE, * LPDIRECT3DDEVICE3GETRENDERTARGETMETHODVALUE;

typedef struct Direct3DDevice3BeginMethodValue
{
    D3DPRIMITIVETYPE PrimitiveType;
    DWORD VertexType;
    DWORD Options;
} DIRECT3DDEVICE3BEGINMETHODVALUE, * LPDIRECT3DDEVICE3BEGINMETHODVALUE;

typedef struct Direct3DDevice3BeginIndexedMethodValue
{
    D3DPRIMITIVETYPE PrimitiveType;
    DWORD VertexType;
    LPVOID Vertices;
    DWORD VertexCount;
    DWORD Options;
} DIRECT3DDEVICE3BEGININDEXEDMETHODVALUE, * LPDIRECT3DDEVICE3BEGININDEXEDMETHODVALUE;

typedef struct Direct3DDevice3VertexMethodValue
{
    LPVOID Vertex;
} DIRECT3DDEVICE3VERTEXMETHODVALUE, * LPDIRECT3DDEVICE3VERTEXMETHODVALUE;

typedef struct Direct3DDevice3IndexMethodValue
{
    WORD Index;
} DIRECT3DDEVICE3INDEXMETHODVALUE, * LPDIRECT3DDEVICE3INDEXMETHODVALUE;

typedef struct Direct3DDevice3EndMethodValue
{
    DWORD Options;
} DIRECT3DDEVICE3ENDMETHODVALUE, * LPDIRECT3DDEVICE3ENDMETHODVALUE;

typedef struct Direct3DDevice3GetRenderStateMethodValue
{
    D3DRENDERSTATETYPE RenderStateType;
    LPDWORD RenderState;
} DIRECT3DDEVICE3GETRENDERSTATEMETHODVALUE, * LPDIRECT3DDEVICE3GETRENDERSTATEMETHODVALUE;

typedef struct Direct3DDevice3SetRenderStateMethodValue
{
    D3DRENDERSTATETYPE RenderStateType;
    DWORD RenderState;
} DIRECT3DDEVICE3SETRENDERSTATEMETHODVALUE, * LPDIRECT3DDEVICE3SETRENDERSTATEMETHODVALUE;

typedef struct Direct3DDevice3GetLightStateMethodValue
{
    D3DLIGHTSTATETYPE LightStateType;
    LPDWORD LightState;
} DIRECT3DDEVICE3GETLIGHTSTATEMETHODVALUE, * LPDIRECT3DDEVICE3GETLIGHTSTATEMETHODVALUE;

typedef struct Direct3DDevice3SetLightStateMethodValue
{
    D3DLIGHTSTATETYPE LightStateType;
    DWORD LightState;
} DIRECT3DDEVICE3SETLIGHTSTATEMETHODVALUE, * LPDIRECT3DDEVICE3SETLIGHTSTATEMETHODVALUE;

typedef struct Direct3DDevice3SetTransformMethodValue
{
    D3DTRANSFORMSTATETYPE TransformStateType;
    LPD3DMATRIX Matrix;
} DIRECT3DDEVICE3SETTRANSFORMMETHODVALUE, * LPDIRECT3DDEVICE3SETTRANSFORMMETHODVALUE;

typedef struct Direct3DDevice3GetTransformMethodValue
{
    D3DTRANSFORMSTATETYPE TransformStateType;
    LPD3DMATRIX Matrix;
} DIRECT3DDEVICE3GETTRANSFORMMETHODVALUE, * LPDIRECT3DDEVICE3GETTRANSFORMMETHODVALUE;

typedef struct Direct3DDevice3MultiplyTransformMethodValue
{
    D3DTRANSFORMSTATETYPE TransformStateType;
    LPD3DMATRIX Matrix;
} DIRECT3DDEVICE3MULTIPLYTRANSFORMMETHODVALUE, * LPDIRECT3DDEVICE3MULTIPLYTRANSFORMMETHODVALUE;

typedef struct Direct3DDevice3DrawPrimitiveMethodValue
{
    D3DPRIMITIVETYPE PrimitiveType;
    DWORD VertexType;
    LPVOID Vertices;
    DWORD VertexCount;
    DWORD Options;
} DIRECT3DDEVICE3DRAWPRIMITIVEMETHODVALUE, * LPDIRECT3DDEVICE3DRAWPRIMITIVEMETHODVALUE;

typedef struct Direct3DDevice3DrawIndexedPrimitiveMethodValue
{
    D3DPRIMITIVETYPE PrimitiveType;
    DWORD VertexType;
    LPVOID Vertices;
    DWORD VertexCount;
    LPWORD Indices;
    DWORD IndexCount;
    DWORD Options;
} DIRECT3DDEVICE3DRAWINDEXEDPRIMITIVEMETHODVALUE, * LPDIRECT3DDEVICE3DRAWINDEXEDPRIMITIVEMETHODVALUE;

typedef struct Direct3DDevice3SetClipStatusMethodValue
{
    LPD3DCLIPSTATUS Status;
} DIRECT3DDEVICE3SETCLIPSTATUSMETHODVALUE, * LPDIRECT3DDEVICE3SETCLIPSTATUSMETHODVALUE;

typedef struct Direct3DDevice3GetClipStatusMethodValue
{
    LPD3DCLIPSTATUS Status;
} DIRECT3DDEVICE3GETCLIPSTATUSMETHODVALUE, * LPDIRECT3DDEVICE3GETCLIPSTATUSMETHODVALUE;

typedef struct Direct3DDevice3DrawPrimitiveStridedMethodValue
{
    D3DPRIMITIVETYPE PrimitiveType;
    DWORD VertexType;
    LPD3DDRAWPRIMITIVESTRIDEDDATA VertexArray;
    DWORD VertexCount;
    DWORD Options;
} DIRECT3DDEVICE3DRAWPRIMITIVESTRIDEDMETHODVALUE, * LPDIRECT3DDEVICE3DRAWPRIMITIVESTRIDEDMETHODVALUE;

typedef struct Direct3DDevice3DrawIndexedPrimitiveStridedMethodValue
{
    D3DPRIMITIVETYPE PrimitiveType;
    DWORD VertexType;
    LPD3DDRAWPRIMITIVESTRIDEDDATA VertexArray;
    DWORD VertexCount;
    LPWORD Indices;
    DWORD IndexCount;
    DWORD Options;
} DIRECT3DDEVICE3DRAWINDEXEDPRIMITIVESTRIDEDMETHODVALUE, * LPDIRECT3DDEVICE3DRAWINDEXEDPRIMITIVESTRIDEDMETHODVALUE;

typedef struct Direct3DDevice3DrawPrimitiveVBMethodValue
{
    D3DPRIMITIVETYPE PrimitiveType;
    LPDIRECT3DVERTEXBUFFER Buffer;
    DWORD StartVertex;
    DWORD VertexCount;
    DWORD Options;
} DIRECT3DDEVICE3DRAWPRIMITIVEVBMETHODVALUE, * LPDIRECT3DDEVICE3DRAWPRIMITIVEVBMETHODVALUE;

typedef struct Direct3DDevice3DrawIndexedPrimitiveVBMethodValue
{
    D3DPRIMITIVETYPE PrimitiveType;
    LPDIRECT3DVERTEXBUFFER Buffer;
    LPWORD Indices;
    DWORD IndexCount;
    DWORD Options;
} DIRECT3DDEVICE3DRAWINDEXEDPRIMITIVEVBMETHODVALUE, * LPDIRECT3DDEVICE3DRAWINDEXEDPRIMITIVEVBMETHODVALUE;

typedef struct Direct3DDevice3ComputeSphereVisibilityMethodValue
{
    LPD3DVECTOR Centers;
    LPD3DVALUE Radii;
    DWORD Count;
    DWORD Options;
    LPDWORD ReturnValues;
} DIRECT3DDEVICE3COMPUTESPHEREVISIBILITYMETHODVALUE, * LPDIRECT3DDEVICE3COMPUTESPHEREVISIBILITYMETHODVALUE;

typedef struct Direct3DDevice3GetTextureMethodValue
{
    DWORD Stage;
    LPDIRECT3DTEXTURE2* Texture;
} DIRECT3DDEVICE3GETTEXTUREMETHODVALUE, * LPDIRECT3DDEVICE3GETTEXTUREMETHODVALUE;

typedef struct Direct3DDevice3SetTextureMethodValue
{
    DWORD Stage;
    LPDIRECT3DTEXTURE2 Texture;
} DIRECT3DDEVICE3SETTEXTUREMETHODVALUE, * LPDIRECT3DDEVICE3SETTEXTUREMETHODVALUE;

typedef struct Direct3DDevice3GetTextureStageStateMethodValue
{
    DWORD Stage;
    D3DTEXTURESTAGESTATETYPE State;
    LPDWORD Value;
} DIRECT3DDEVICE3GETTEXTURESTAGESTATEMETHODVALUE, * LPDIRECT3DDEVICE3GETTEXTURESTAGESTATEMETHODVALUE;

typedef struct Direct3DDevice3SetTextureStageStateMethodValue
{
    DWORD Stage;
    D3DTEXTURESTAGESTATETYPE State;
    DWORD Value;
} DIRECT3DDEVICE3SETTEXTURESTAGESTATEMETHODVALUE, * LPDIRECT3DDEVICE3SETTEXTURESTAGESTATEMETHODVALUE;

typedef struct Direct3DDevice3ValidateDeviceMethodValue
{
    LPDWORD Passes;
} DIRECT3DDEVICE3VALIDATEDEVICEMETHODVALUE, * LPDIRECT3DDEVICE3VALIDATEDEVICEMETHODVALUE;

typedef struct Direct3DDevice3EnumTextureFormatsMethodCallbackValue
{
    LPVOID Object;
    LPDDPIXELFORMAT Format;
} DIRECT3DDEVICE3ENUMTEXTUREFORMATSMETHODCALLBACKVALUE, * LPDIRECT3DDEVICE3ENUMTEXTUREFORMATSMETHODCALLBACKVALUE;