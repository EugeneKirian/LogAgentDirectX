/*
Copyright (c) 2024 Eugene Kirian

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/

#pragma once

#include "Base.hxx"

typedef struct Direct3DDeviceQueryInterfaceMethodValue
{
    GUID ID;
    LPVOID* Object;
} DIRECT3DDEVICEQUERYINTERFACEMETHODVALUE, * LPDIRECT3DDEVICEQUERYINTERFACEMETHODVALUE;

typedef struct Direct3DDeviceAddRefMethodValue
{

} DIRECT3DDEVICEADDREFMETHODVALUE, * LPDIRECT3DDEVICEADDREFMETHODVALUE;

typedef struct Direct3DDeviceReleaseMethodValue
{

} DIRECT3DDEVICERELEASEMETHODVALUE, * LPDIRECT3DDEVICERELEASEMETHODVALUE;

typedef struct Direct3DDeviceInitializeMethodValue
{
    LPDIRECT3D Object;
    LPGUID GUID;
    LPD3DDEVICEDESC Descriptor;
} DIRECT3DDEVICEINITIALIZEMETHODVALUE, * LPDIRECT3DDEVICEINITIALIZEMETHODVALUE;

typedef struct Direct3DDeviceGetCapsMethodValue
{
    LPD3DDEVICEDESC HardwareDescriptor;
    LPD3DDEVICEDESC EmulationDescriptor;
} DIRECT3DDEVICEGETCAPSMETHODVALUE, * LPDIRECT3DDEVICEGETCAPSMETHODVALUE;

typedef struct Direct3DDeviceSwapTextureHandlesMethodValue
{
    LPDIRECT3DTEXTURE Texture1;
    LPDIRECT3DTEXTURE Texture2;
} DIRECT3DDEVICESWAPTEXTUREHANDLESMETHODVALUE, * LPDIRECT3DDEVICESWAPTEXTUREHANDLESMETHODVALUE;

typedef struct Direct3DDeviceCreateExecuteBufferMethodValue
{
    LPD3DEXECUTEBUFFERDESC Descriptor;
    LPDIRECT3DEXECUTEBUFFER* Buffer;
    LPUNKNOWN Unknown;
} DIRECT3DDEVICECREATEEXECUTEBUFFERMETHODVALUE, * LPDIRECT3DDEVICECREATEEXECUTEBUFFERMETHODVALUE;

typedef struct Direct3DDeviceGetStatsMethodValue
{
    LPD3DSTATS Statistics;
} DIRECT3DDEVICEGETSTATSMETHODVALUE, * LPDIRECT3DDEVICEGETSTATSMETHODVALUE;

typedef struct Direct3DDeviceExecuteMethodValue
{
    LPDIRECT3DEXECUTEBUFFER Buffer;
    LPDIRECT3DVIEWPORT ViewPort;
    DWORD Options;
} DIRECT3DDEVICEEXECUTEMETHODVALUE, * LPDIRECT3DDEVICEEXECUTEMETHODVALUE;

typedef struct Direct3DDeviceAddViewportMethodValue
{
    LPDIRECT3DVIEWPORT ViewPort;
} DIRECT3DDEVICEADDVIEWPORTMETHODVALUE, * LPDIRECT3DDEVICEADDVIEWPORTMETHODVALUE;

typedef struct Direct3DDeviceDeleteViewportMethodValue
{
    LPDIRECT3DVIEWPORT ViewPort;
} DIRECT3DDEVICEDELETEVIEWPORTMETHODVALUE, * LPDIRECT3DDEVICEDELETEVIEWPORTMETHODVALUE;

typedef struct Direct3DDeviceNextViewportMethodValue
{
    LPDIRECT3DVIEWPORT ViewPort;
    LPDIRECT3DVIEWPORT* NextViewPort;
    DWORD Options;
} DIRECT3DDEVICENEXTVIEWPORTMETHODVALUE, * LPDIRECT3DDEVICENEXTVIEWPORTMETHODVALUE;

typedef struct Direct3DDevicePickMethodValue
{
    LPDIRECT3DEXECUTEBUFFER Buffer;
    LPDIRECT3DVIEWPORT ViewPort;
    DWORD Options;
    LPD3DRECT Rect;
} DIRECT3DDEVICEPICKMETHODVALUE, * LPDIRECT3DDEVICEPICKMETHODVALUE;

typedef struct Direct3DDeviceGetPickRecordsMethodValue
{
    LPDWORD Count;
    LPD3DPICKRECORD Records;
} DIRECT3DDEVICEGETPICKRECORDSMETHODVALUE, * LPDIRECT3DDEVICEGETPICKRECORDSMETHODVALUE;

typedef struct Direct3DDeviceEnumTextureFormatsMethodValue
{
    LPD3DENUMTEXTUREFORMATSCALLBACK Callback;
    LPVOID Context;
} DIRECT3DDEVICEENUMTEXTUREFORMATSMETHODVALUE, * LPDIRECT3DDEVICEENUMTEXTUREFORMATSMETHODVALUE;

typedef struct Direct3DDeviceCreateMatrixMethodValue
{
    LPD3DMATRIXHANDLE Handle;
} DIRECT3DDEVICECREATEMATRIXMETHODVALUE, * LPDIRECT3DDEVICECREATEMATRIXMETHODVALUE;

typedef struct Direct3DDeviceSetMatrixMethodValue
{
    D3DMATRIXHANDLE Handle;
    LPD3DMATRIX Matrix;
} DIRECT3DDEVICESETMATRIXMETHODVALUE, * LPDIRECT3DDEVICESETMATRIXMETHODVALUE;

typedef struct Direct3DDeviceGetMatrixMethodValue
{
    D3DMATRIXHANDLE Handle;
    LPD3DMATRIX Matrix;
} DIRECT3DDEVICEGETMATRIXMETHODVALUE, * LPDIRECT3DDEVICEGETMATRIXMETHODVALUE;

typedef struct Direct3DDeviceDeleteMatrixMethodValue
{
    D3DMATRIXHANDLE Handle;
} DIRECT3DDEVICEDELETEMATRIXMETHODVALUE, * LPDIRECT3DDEVICEDELETEMATRIXMETHODVALUE;

typedef struct Direct3DDeviceBeginSceneMethodValue
{

} DIRECT3DDEVICEBEGINSCENEMETHODVALUE, * LPDIRECT3DDEVICEBEGINSCENEMETHODVALUE;

typedef struct Direct3DDeviceEndSceneMethodValue
{

} DIRECT3DDEVICEENDSCENEMETHODVALUE, * LPDIRECT3DDEVICEENDSCENEMETHODVALUE;

typedef struct Direct3DDeviceGetDirect3DMethodValue
{
    LPDIRECT3D* Object;
} DIRECT3DDEVICEGETDIRECT3DMETHODVALUE, * LPDIRECT3DDEVICEGETDIRECT3DMETHODVALUE;

typedef struct Direct3DDeviceEnumTextureFormatsMethodCallbackValue
{
    LPVOID Object;
    LPDDSURFACEDESC Descriptor;
} DIRECT3DDEVICEENUMTEXTUREFORMATSMETHODCALLBACKVALUE, * LPDIRECT3DDEVICEENUMTEXTUREFORMATSMETHODCALLBACKVALUE;