/*
Copyright (c) 2024 Eugene Kirian

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/

#pragma once

#include "Base.hxx"

typedef struct Direct3DCubeTexture8QueryInterfaceMethodValue
{
    GUID ID;
    LPVOID* Object;
} DIRECT3DCUBETEXTURE8QUERYINTERFACEMETHODVALUE, * LPDIRECT3DCUBETEXTURE8QUERYINTERFACEMETHODVALUE;

typedef struct Direct3DCubeTexture8AddRefMethodValue
{

} DIRECT3DCUBETEXTURE8ADDREFMETHODVALUE, * LPDIRECT3DCUBETEXTURE8ADDREFMETHODVALUE;

typedef struct Direct3DCubeTexture8ReleaseMethodValue
{

} DIRECT3DCUBETEXTURE8RELEASEMETHODVALUE, * LPDIRECT3DCUBETEXTURE8RELEASEMETHODVALUE;

typedef struct Direct3DCubeTexture8GetDeviceMethodValue
{
    LPDIRECT3DDEVICE8* Device;
} DIRECT3DCUBETEXTURE8GETDEVICEMETHODVALUE, * LPDIRECT3DCUBETEXTURE8GETDEVICEMETHODVALUE;

typedef struct Direct3DCubeTexture8SetPrivateDataMethodValue
{
    REFGUID ID;
    LPCVOID Data;
    DWORD Size;
    DWORD Options;
} DIRECT3DCUBETEXTURE8SETPRIVATEDATAMETHODVALUE, * LPDIRECT3DCUBETEXTURE8SETPRIVATEDATAMETHODVALUE;

typedef struct Direct3DCubeTexture8GetPrivateDataMethodValue
{
    REFGUID ID;
    LPVOID Data;
    DWORD* Size;
} DIRECT3DCUBETEXTURE8GETPRIVATEDATAMETHODVALUE, * LPDIRECT3DCUBETEXTURE8GETPRIVATEDATAMETHODVALUE;

typedef struct Direct3DCubeTexture8FreePrivateDataMethodValue
{
    REFGUID ID;
} DIRECT3DCUBETEXTURE8FREEPRIVATEDATAMETHODVALUE, * LPDIRECT3DCUBETEXTURE8FREEPRIVATEDATAMETHODVALUE;

typedef struct Direct3DCubeTexture8SetPriorityMethodValue
{
    DWORD Priority;
} DIRECT3DCUBETEXTURE8SETPRIORITYMETHODVALUE, * LPDIRECT3DCUBETEXTURE8SETPRIORITYMETHODVALUE;

typedef struct Direct3DCubeTexture8GetPriorityMethodValue
{

} DIRECT3DCUBETEXTURE8GETPRIORITYMETHODVALUE, * LPDIRECT3DCUBETEXTURE8GETPRIORITYMETHODVALUE;

typedef struct Direct3DCubeTexture8PreLoadMethodValue
{

} DIRECT3DCUBETEXTURE8PRELOADMETHODVALUE, * LPDIRECT3DCUBETEXTURE8PRELOADMETHODVALUE;

typedef struct Direct3DCubeTexture8GetTypeMethodValue
{

} DIRECT3DCUBETEXTURE8GETTYPEMETHODVALUE, * LPDIRECT3DCUBETEXTURE8GETTYPEMETHODVALUE;

typedef struct Direct3DCubeTexture8SetLODMethodValue
{
    DWORD LOD;
} DIRECT3DCubeTexture8SETLODMETHODVALUE, * LPDIRECT3DCUBETEXTURE8SETLODMETHODVALUE;

typedef struct Direct3DCubeTexture8GetLODMethodValue
{

} DIRECT3DCUBETEXTURE8GETLODMETHODVALUE, * LPDIRECT3DCUBETEXTURE8GETLODMETHODVALUE;

typedef struct Direct3DCubeTexture8GetLevelCountMethodValue
{

} DIRECT3DCUBETEXTURE8GETLEVELCOUNTMETHODVALUE, * LPDIRECT3DCUBETEXTURE8GETLEVELCOUNTMETHODVALUE;

typedef struct Direct3DCubeTexture8GetLevelDescMethodValue
{
    UINT Level;
    D3DSURFACE_DESC* Desc;
} DIRECT3DCUBETEXTURE8GETLEVELDESCMETHODVALUE, * LPDIRECT3DCUBETEXTURE8GETLEVELDESCMETHODVALUE;

typedef struct Direct3DCubeTexture8GetCubeMapSurfaceMethodValue
{
    D3DCUBEMAP_FACES Type;
    UINT Level;
    LPDIRECT3DSURFACE8* Surface;
} DIRECT3DCUBETEXTURE8GETCUBEMAPSURFACEMETHODVALUE, * LPDIRECT3DCUBETEXTURE8GETCUBEMAPSURFACEMETHODVALUE;

typedef struct Direct3DCubeTexture8LockRectMethodValue
{
    D3DCUBEMAP_FACES Type;
    UINT Level;
    D3DLOCKED_RECT* LockedRect;
    CONST RECT* Rect;
    DWORD Options;
} DIRECT3DCUBETEXTURE8LOCKRECTMETHODVALUE, * LPDIRECT3DCUBETEXTURE8LOCKRECTMETHODVALUE;

typedef struct Direct3DCubeTexture8UnlockRectMethodValue
{
    D3DCUBEMAP_FACES Type;
    UINT Level;
} DIRECT3DCUBETEXTURE8UNLOCKRECTMETHODVALUE, * LPDIRECT3DCUBETEXTURE8UNLOCKRECTMETHODVALUE;

typedef struct Direct3DCubeTexture8AddDirtyRectMethodValue
{
    D3DCUBEMAP_FACES Type;
    CONST RECT* Rect;
} DIRECT3DCUBETEXTURE8ADDDIRTYRECTMETHODVALUE, * LPDIRECT3DCUBETEXTURE8ADDDIRTYRECTMETHODVALUE;